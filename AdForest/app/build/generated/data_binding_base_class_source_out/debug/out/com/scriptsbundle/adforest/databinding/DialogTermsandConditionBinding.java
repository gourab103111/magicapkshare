// Generated by view binder compiler. Do not edit!
package com.scriptsbundle.adforest.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.scriptsbundle.adforest.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogTermsandConditionBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final Button cancelButton;

  @NonNull
  public final LinearLayout iner1;

  @NonNull
  public final LinearLayout linearLayout5;

  @NonNull
  public final TextView termsConditionsTitle;

  @NonNull
  public final WebView webViewTermsAndCondition;

  private DialogTermsandConditionBinding(@NonNull NestedScrollView rootView,
      @NonNull Button cancelButton, @NonNull LinearLayout iner1,
      @NonNull LinearLayout linearLayout5, @NonNull TextView termsConditionsTitle,
      @NonNull WebView webViewTermsAndCondition) {
    this.rootView = rootView;
    this.cancelButton = cancelButton;
    this.iner1 = iner1;
    this.linearLayout5 = linearLayout5;
    this.termsConditionsTitle = termsConditionsTitle;
    this.webViewTermsAndCondition = webViewTermsAndCondition;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogTermsandConditionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogTermsandConditionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_termsand_condition, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogTermsandConditionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancel_button;
      Button cancelButton = ViewBindings.findChildViewById(rootView, id);
      if (cancelButton == null) {
        break missingId;
      }

      id = R.id.iner1;
      LinearLayout iner1 = ViewBindings.findChildViewById(rootView, id);
      if (iner1 == null) {
        break missingId;
      }

      id = R.id.linearLayout5;
      LinearLayout linearLayout5 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout5 == null) {
        break missingId;
      }

      id = R.id.terms_conditionsTitle;
      TextView termsConditionsTitle = ViewBindings.findChildViewById(rootView, id);
      if (termsConditionsTitle == null) {
        break missingId;
      }

      id = R.id.webViewTermsAndCondition;
      WebView webViewTermsAndCondition = ViewBindings.findChildViewById(rootView, id);
      if (webViewTermsAndCondition == null) {
        break missingId;
      }

      return new DialogTermsandConditionBinding((NestedScrollView) rootView, cancelButton, iner1,
          linearLayout5, termsConditionsTitle, webViewTermsAndCondition);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
