// Generated by view binder compiler. Do not edit!
package com.scriptsbundle.adforest.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.facebook.shimmer.ShimmerFrameLayout;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.scriptsbundle.adforest.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class KtUserConsentBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView agreePrivacyPolicy;

  @NonNull
  public final TextView agreeTermsCOndition;

  @NonNull
  public final Button btnAccept;

  @NonNull
  public final Button btnDecline;

  @NonNull
  public final CheckBox chPrivacyPolicy;

  @NonNull
  public final CheckBox chTermsCondition;

  @NonNull
  public final FloatingActionButton fab;

  @NonNull
  public final ImageView logo;

  @NonNull
  public final LinearLayout mainLinear;

  @NonNull
  public final NestedScrollView nestedScroll;

  @NonNull
  public final LinearLayout privacyPolicyLayout;

  @NonNull
  public final WebView privacyPolicyWebView;

  @NonNull
  public final ShimmerFrameLayout shimmerFrameLayout;

  @NonNull
  public final LinearLayout shimmerMain;

  @NonNull
  public final LinearLayout termsConditionsLayout;

  @NonNull
  public final WebView termsConditionsWebView;

  @NonNull
  public final TextView txtPrivacyHeading;

  @NonNull
  public final TextView txtTermsConditionHeading;

  @NonNull
  public final TextView txtTitle;

  @NonNull
  public final TextView txtUpdateDate;

  private KtUserConsentBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView agreePrivacyPolicy, @NonNull TextView agreeTermsCOndition,
      @NonNull Button btnAccept, @NonNull Button btnDecline, @NonNull CheckBox chPrivacyPolicy,
      @NonNull CheckBox chTermsCondition, @NonNull FloatingActionButton fab,
      @NonNull ImageView logo, @NonNull LinearLayout mainLinear,
      @NonNull NestedScrollView nestedScroll, @NonNull LinearLayout privacyPolicyLayout,
      @NonNull WebView privacyPolicyWebView, @NonNull ShimmerFrameLayout shimmerFrameLayout,
      @NonNull LinearLayout shimmerMain, @NonNull LinearLayout termsConditionsLayout,
      @NonNull WebView termsConditionsWebView, @NonNull TextView txtPrivacyHeading,
      @NonNull TextView txtTermsConditionHeading, @NonNull TextView txtTitle,
      @NonNull TextView txtUpdateDate) {
    this.rootView = rootView;
    this.agreePrivacyPolicy = agreePrivacyPolicy;
    this.agreeTermsCOndition = agreeTermsCOndition;
    this.btnAccept = btnAccept;
    this.btnDecline = btnDecline;
    this.chPrivacyPolicy = chPrivacyPolicy;
    this.chTermsCondition = chTermsCondition;
    this.fab = fab;
    this.logo = logo;
    this.mainLinear = mainLinear;
    this.nestedScroll = nestedScroll;
    this.privacyPolicyLayout = privacyPolicyLayout;
    this.privacyPolicyWebView = privacyPolicyWebView;
    this.shimmerFrameLayout = shimmerFrameLayout;
    this.shimmerMain = shimmerMain;
    this.termsConditionsLayout = termsConditionsLayout;
    this.termsConditionsWebView = termsConditionsWebView;
    this.txtPrivacyHeading = txtPrivacyHeading;
    this.txtTermsConditionHeading = txtTermsConditionHeading;
    this.txtTitle = txtTitle;
    this.txtUpdateDate = txtUpdateDate;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static KtUserConsentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static KtUserConsentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.kt_user_consent, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static KtUserConsentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.agree_privacyPolicy;
      TextView agreePrivacyPolicy = ViewBindings.findChildViewById(rootView, id);
      if (agreePrivacyPolicy == null) {
        break missingId;
      }

      id = R.id.agree_termsCOndition;
      TextView agreeTermsCOndition = ViewBindings.findChildViewById(rootView, id);
      if (agreeTermsCOndition == null) {
        break missingId;
      }

      id = R.id.btnAccept;
      Button btnAccept = ViewBindings.findChildViewById(rootView, id);
      if (btnAccept == null) {
        break missingId;
      }

      id = R.id.btnDecline;
      Button btnDecline = ViewBindings.findChildViewById(rootView, id);
      if (btnDecline == null) {
        break missingId;
      }

      id = R.id.ch_privacyPolicy;
      CheckBox chPrivacyPolicy = ViewBindings.findChildViewById(rootView, id);
      if (chPrivacyPolicy == null) {
        break missingId;
      }

      id = R.id.ch_termsCondition;
      CheckBox chTermsCondition = ViewBindings.findChildViewById(rootView, id);
      if (chTermsCondition == null) {
        break missingId;
      }

      id = R.id.fab;
      FloatingActionButton fab = ViewBindings.findChildViewById(rootView, id);
      if (fab == null) {
        break missingId;
      }

      id = R.id.logo;
      ImageView logo = ViewBindings.findChildViewById(rootView, id);
      if (logo == null) {
        break missingId;
      }

      id = R.id.mainLinear;
      LinearLayout mainLinear = ViewBindings.findChildViewById(rootView, id);
      if (mainLinear == null) {
        break missingId;
      }

      id = R.id.nestedScroll;
      NestedScrollView nestedScroll = ViewBindings.findChildViewById(rootView, id);
      if (nestedScroll == null) {
        break missingId;
      }

      id = R.id.privacy_policy_layout;
      LinearLayout privacyPolicyLayout = ViewBindings.findChildViewById(rootView, id);
      if (privacyPolicyLayout == null) {
        break missingId;
      }

      id = R.id.privacy_policy_webView;
      WebView privacyPolicyWebView = ViewBindings.findChildViewById(rootView, id);
      if (privacyPolicyWebView == null) {
        break missingId;
      }

      id = R.id.shimmerFrameLayout;
      ShimmerFrameLayout shimmerFrameLayout = ViewBindings.findChildViewById(rootView, id);
      if (shimmerFrameLayout == null) {
        break missingId;
      }

      id = R.id.shimmerMain;
      LinearLayout shimmerMain = ViewBindings.findChildViewById(rootView, id);
      if (shimmerMain == null) {
        break missingId;
      }

      id = R.id.terms_conditions_layout;
      LinearLayout termsConditionsLayout = ViewBindings.findChildViewById(rootView, id);
      if (termsConditionsLayout == null) {
        break missingId;
      }

      id = R.id.terms_conditions_webView;
      WebView termsConditionsWebView = ViewBindings.findChildViewById(rootView, id);
      if (termsConditionsWebView == null) {
        break missingId;
      }

      id = R.id.txt_Privacy_heading;
      TextView txtPrivacyHeading = ViewBindings.findChildViewById(rootView, id);
      if (txtPrivacyHeading == null) {
        break missingId;
      }

      id = R.id.txt_termsCondition_heading;
      TextView txtTermsConditionHeading = ViewBindings.findChildViewById(rootView, id);
      if (txtTermsConditionHeading == null) {
        break missingId;
      }

      id = R.id.txt_title;
      TextView txtTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtTitle == null) {
        break missingId;
      }

      id = R.id.txt_update_date;
      TextView txtUpdateDate = ViewBindings.findChildViewById(rootView, id);
      if (txtUpdateDate == null) {
        break missingId;
      }

      return new KtUserConsentBinding((RelativeLayout) rootView, agreePrivacyPolicy,
          agreeTermsCOndition, btnAccept, btnDecline, chPrivacyPolicy, chTermsCondition, fab, logo,
          mainLinear, nestedScroll, privacyPolicyLayout, privacyPolicyWebView, shimmerFrameLayout,
          shimmerMain, termsConditionsLayout, termsConditionsWebView, txtPrivacyHeading,
          txtTermsConditionHeading, txtTitle, txtUpdateDate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
